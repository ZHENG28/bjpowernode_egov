1. 搭建开发环境
2. 提交表单之前进行用户信息的非空校验（未使用正则表达式）
3. package命名规范：公司域名倒序 + 项目名 + 模块名 + 功能名
    e.g. com.bjpowernode.egov.system.servlet
4. 提供工具类（JDBC、日期类、常量类）
5. 分页查询：
    1) 逻辑分页: 从session中获取全部信息的List集合，再根据页码读出属于当前页的List集合
        优: 不需要频繁地连接数据库
        缺: 无法保证数据的最新性；由于底层使用session对象，若数据量过于庞大，将会耗费大量的内存
        适用情况: 数据不会更新或极少更新；数据量小
    -->极少使用
    2) 物理分页: 使用各大数据库中特有的SQL语句（Oracle中的rownum、MySQL中的limit等），查询出页面上所需要的数据
        优: 保证数据的最新性
        缺:
            每一次都需要重新连接数据库（以后会使用连接池以提高访问效率）
            由于SQL语句使用了数据库内置的特殊语法，因此SQL语句无法移植
            （以后会使用ibatis高级框架，SQL语句会写在配置文件中，因此可修改、可移植）
    -->比较常用
6. 机构类型的显示:
    1) 直接在JSP文件中使用三目运算符
    2) 通过资源绑定的配置文件，对其进行定义：(IDEA中的.properties文件需要设置UTF-8的编码方式)
        i. 先将配置文件中的中文内容转换成unicode编码方式（可使用JDK中自带的native2ascii工具）
        ii. 路径问题：
            src目录下存放的是java源文件-->其所有文件都保存在类路径当中
            bin目录下存放的是java字节码文件-->被称作类路径
            （直接放在src目录下的文件，即放在了类的根路径下）
        iii. 两种写法（均可）
            // 写法一：
            // 获取配置文件的路径
            String path = Thread.currentThread().getContextClassLoader().getResource(".properties").toURI().getPath();
            // 创建输入流
            FileReader reader = new FileReader(path);
            // 创建属性类对象
            Properties pro = new Properties();
            // 将文件中的数据加载到属性类对象中
            pro.load(reader);
            // 通过key来获取value
            String a1 = pro.getProperty("0");
            String b1 = pro.getProperty("1");

            // 写法二：
            // 资源绑定工具，专门为properties属性配置文件准备的工具类
            ResourceBundle bundle = ResourceBundle.getBundle("path");
            String a2 = bundle.getString("0");
            String b2 = bundle.getString("1");
7. 更新分页查询的状态信息：
    共totalsize条记录
    共totalpage页
    当前第pageNo页
    每页显示的记录条数pagesize
8. 翻页功能：
    第一页
    上一页
    下一页
    最后一页
9. 跳转到指定页面
10. "修改"和"删除"图片按钮的联动效果(修改src和disabled属性)
    load事件、onload事件句柄
11. 全选和取消全选
12. 跳转到修改用户信息页面（传递usercode给servlet）
13. 修改用户信息的表单提交前需要先校验表单
    1) 面向过程的js代码
    2) 面向对象的js代码
14. 修改用户信息：修改后跳转到分页查询页面，且原先在哪一页跳转后就在哪一页
15. 删除用户信息：删除之前提醒用户是否删除
    事务：开启、提交、回滚、结束
    -->拓展：
        1) 事务应在哪个类中控制？（通常由N条DML语句共同联合起来才完成一个完整的事务）
                service层：推荐在此（因为service层与业务紧密相关，通常一个方法对应一个完整的事务）
                dao层：不能在这（因为事务和业务紧密相关，而在dao中没有业务逻辑）
                servlet层：可以在此
        2) 如果在service层中控制事务，则必须保证service方法执行时的连接对象Connection和dao方法中的连接对象是同一个
            -- 示例中使用了方法调用时将conn作为参数传递进去的方式以保证service和dao中的连接对象是同一个
            -- 要保证一个线程一个连接对象（不能让多个线程共享同一个连接对象；也不能将连接对象声明成单例对象，会导致所有的线程共享同一个连接对象-->造成事务混乱）
        3) 必须在service方法结束时，即事务结束时将连接对象关闭，而不能在dao方法中关闭连接对象
        4) dao中的异常需要上抛给service，因为service中需要catch捕获（回滚事务），保证数据的安全
16. 使用批处理batch操作提高删除效率
17. 封装分页对象，提高分页查询编程效率
18. 浏览器中的UI线程
19. 保存用户信息之前需要验证用户代码是否存在
    1) 如果存在则返回原页面，并且提示错误信息
    2) 如果不存在则直接保存用户信息，保护成功后跳转到分页查询
-->由于UI线程，导致报错之后原页面中的信息全部清空了。因此，页面最好是局部刷新，以提高客户的体验
20. 使用ajax校验用户代码是否存在
21. 实现用户登录
22. 实现退出系统，销毁session
    -->由于使用框架，因此需要设置退出的超链接处的target属性，即设置最终跳转的资源的显示位置
23. 保存投资人
24. 动态参数分页查询
    sql语句动态添加where和and时，直接在SQL语句后面添加where 1=1 以占用where关键字，以后拼接sql语句时全部都可添加and而无需判断
    给以上动态添加的条件中的？赋值，使用List集合
25. 分页状态信息，翻页
26. 翻页时不丢失查询条件
27. 查看投资人的明细（注意空值处理）
28. 处理重复代码：如之前写的request.getParameter("")、ps.setString( , )等存在代码重复和面向过程的问题
    代码重复的两大类：
        功能性代码重复（容易处理）：编写一个工具类即可解决
        业务逻辑代码重复（不容易处理）：需要使用反射机制封装解决
29. 几乎在每一个servlet的service方法中都需要编写：request.setCharacterEncoding("UTF-8");
    缺点：
        1) 代码无法得到复用
        2) 这些大多与业务逻辑无关，属于非业务逻辑代码，容易被遗忘，忘记编写
        3) 业务逻辑代码和会业务逻辑代码掺杂在一起，使得业务逻辑代码很难得到扩展
        4) 组件component的独立性差，耦合度高-->高内聚、低耦合，这导致复用性差
    -->理解AOP编程方式，此处可使用Filter技术解决字符编码方式
30. 用户在使用该系统之前必须验证是否登录，如果登陆成功则继续访问，如果没有登录则跳转到登陆页面。
    而每一个servlet执行之前、访问.html之前、访问.jsp之前，都必须验证，因此使用过滤器实现验证用户是否已经登录
31. 验证企业的组织机构代码是否存在
32. 复制完成分页查询投资人的信息（动态参数查询）
    由于底层执行的servlet是同一个，但最终跳转的资源不同，因此需要在表单提交的时候，添加一个隐藏域，并在隐藏域中填写跳转的路径
33. 将企业信息表单中的控件的name属性值修改为和数据库的字段名一致（最好）
34. 使用js完成父子窗口通信，并且动态添加、删除投资人信息
35. 使用js动态计算注册资本、外行注册资本、外方的出资比例
36. 保存企业以及企业和投资人的关系信息
37. 使用MVC架构模式修改保存用户信息
    DTO(Data Transfer Object)：方法调用时在对象之间的数据传递对象
    BO(Business Object)：业务对象
    POJO(Plain Ordinary Java Object)：简单无规则的java对象
    VO(Value Object)：值对象
    PO(Persistant Object)：持久对象
38. 使用MVC架构模式修改保存企业信息
39. 分页查询企业信息
40. 投资比例饼状图的展示
    1) FushionchartsFree（Flex插件，JS + XML + Flash）
    2) jfreechart（基于java语言的图表）
41. 将子窗口的组织机构代码设置到父窗口上：window.opener.(function/执行代码)
42. 查看企业明细：显示币种时，由于币种在数据库中存储的和国别相同，而属性配置文件中的key不能重复
    -->解决方案：
        1) 再写一个配置文件
        2) 币种统一添加前缀或后缀
43. 保存核准件，完成文件上传
44. JSTL + EL + fn 修改分页查询企业信息
45. 使用ajax完成查看核准件的明细
46. 审核核准件（反馈）

遗留问题：
    翻页的显示信息仍未做成ajax
    事务机制尚未使用过滤器
    ajax无法直接接收String类型的返回值
    使用正则表达式判断各输入内容的合理性